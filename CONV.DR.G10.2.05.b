* @ValidationCode : N/A
* @ValidationInfo : Timestamp : 19 Jan 2021 11:14:56
* @ValidationInfo : Encoding : Cp1252
* @ValidationInfo : User Name : N/A
* @ValidationInfo : Nb tests success : N/A
* @ValidationInfo : Nb tests failure : N/A
* @ValidationInfo : Rating : N/A
* @ValidationInfo : Coverage : N/A
* @ValidationInfo : Strict flag : N/A
* @ValidationInfo : Bypass GateKeeper : false
* @ValidationInfo : Compiler Version : N/A
* @ValidationInfo : Copyright Temenos Headquarters SA 1993-2021. All rights reserved.

* Version 3 07/06/01  GLOBUS Release No. 200511 21/10/05
*-----------------------------------------------------------------------------
* <Rating>1915</Rating>
*-----------------------------------------------------------------------------
    $PACKAGE LC.Contract
      SUBROUTINE CONV.DR.G10.2.05(DR.ID, R.DR, F.DR)
*
* 07/08/00 - GB0001996/G00020146
*            Due to the problem raised under HD9901938, the LIVEDB
*            entry using the REIMBURSE.AMOUNT but in DOCUMENT ccy.
*            This routine will update the VOC to flag that this
*            This program will update VOC with G102FIX ID. This
*            will help us identify later, if any other conversion
*            need.
*

$INSERT I_COMMON
$INSERT I_EQUATE
$INSERT I_F.SPF
$INSERT I_LC.COMMON
$INSERT I_F.STMT.ENTRY
$INSERT I_F.USER

      EQU TF.LC.LC.TYPE TO 2
      EQU TF.LC.EXTERNAL.REFERENCE TO 3
      EQU TF.LC.ACCOUNT.OFFICER TO 91
      EQU TF.LC.POSITION.TYPE TO 25
      EQU TF.LC.EXPIRY.DATE TO 28
      EQU TF.LC.CATEGORY.CODE TO 90
      EQU TF.LC.CON.CUS.LINK TO 18
      EQU TF.LC.CURRENCY.MARKET TO 24
      EQU TF.LC.AUDIT.DATE.TIME TO 200

      EQU TF.DR.DRAWING.TYPE TO 1
      EQU TF.DR.DRAW.CURRENCY TO 2
      EQU TF.DR.DOCUMENT.AMOUNT TO 3
      EQU TF.DR.MATURITY.REVIEW TO 7
      EQU TF.DR.RATE.BOOKED TO 10
      EQU TF.DR.VALUE.DATE TO 11
      EQU TF.DR.LOAD.AMOUNT TO 16
      EQU TF.DR.DRAWDOWN.ACCOUNT TO 17
      EQU TF.DR.REIMBURSE.AMOUNT TO 21
      EQU TF.DR.DISCOUNT.AMT TO 14
      EQU TF.DR.DIS.PARTY.CHRD TO 90
      EQU TF.DR.LC.CREDIT.TYPE TO 99
      EQU TF.DR.REIMB.DOC.CCY.AMT TO 130
      EQU TF.DR.RECORD.STATUS TO 173
      EQU TF.DR.DATE.TIME TO 176
      EQU TF.DR.CO.CODE TO 178
      EQU TF.DR.AUDIT.DATE.TIME TO 181

      EQU LCAC.CHRG.AMT.DUE TO 5
      EQU LCAC.CHRG.CODE TO 7
      EQU LCAC.CHRG.CCY TO 8
      EQU LCAC.PARTY.CHRG TO 9
      EQU LCAC.CHRG.REL.DRAW TO 10
      EQU LCAC.CHRG.LCCY.AMT TO 19
      EQU LCAC.TAX.CODE TO 27
      EQU LCAC.TAX.CODE.CCY TO 28
      EQU LCAC.TAX.AMT TO 29
      EQU LCAC.TAX.PARTY.CHRG TO 30
      EQU LCAC.TAX.REL.DRAW TO 31
      EQU LCAC.TAX.LCCY.AMT TO 33
      EQU LCAC.TAX.DATE TO 36
      EQU LCAC.AUDIT.DATE.TIME TO 77

      EQU LC.PARA.PAY.TRANS.CR TO 7
      EQU LC.PARA.PAY.TRANS.DR TO 8
      EQU LC.PARA.AUDIT.DATE.TIME TO 85

      EQU EB.CUR.QUOTATION.CODE TO 5
      EQU EB.CUR.CURRENCY.MARKET TO 12
      EQU EB.CUR.MID.REVAL.RATE TO 14
      EQU EB.CUR.FIXED.RATE TO 34
      EQU EB.TAX.CATEGORY TO 4
      EQU EB.TAX.TR.CODE.DR TO 5
      EQU AC.CURRENCY TO 8
      EQU AC.CLS.CATEGORY TO 3
      EQU FT4.CATEGORY.ACCOUNT TO 4
      EQU FT4.TXN.CODE.DR TO 6
      EQU FT5.CATEGORY.ACCOUNT TO 3
      EQU FT5.TXN.CODE.DR TO 5

      EQU TRUE TO 1
      EQU FALSE TO 0
      EQU NARRATIVE TO "USANCE DISCOUNT MIGRATION - G10.2.02"

      *// Only discouting will be processed
      IF R.SPF.SYSTEM<SPF.PREVIOUS.RELEASE> [1,5] EQ 'G10.2' THEN RETURN
      IF INDEX(DR.ID,';',1) THEN RETURN  ; * Skip History update
      IF R.DR<TF.DR.RECORD.STATUS> # '' THEN RETURN
      IF R.DR<TF.DR.DISCOUNT.AMT> <= 0 THEN RETURN
      IF NOT(R.DR<TF.DR.DRAWING.TYPE> MATCH 'AC':VM:'DP') THEN RETURN
      REIMB.ACCT = R.DR<TF.DR.DRAWDOWN.ACCOUNT>
      CALL DBR('ACCOUNT':FM:AC.CURRENCY,REIMB.ACCT,REIMB.CCY)
*GB0002227s
*IF it is the same currency then update the field REIMB.AMT.DO.CCY
* and return
      IF REIMB.CCY = R.DR<TF.DR.DRAW.CURRENCY> THEN
         R.DR<TF.DR.REIMB.DOC.CCY.AMT> = R.DR<TF.DR.REIMBURSE.AMOUNT>
         RETURN
      END

*GB0002227e
      GOSUB INITIALIZE
*      PRINT
*      PRINT DR.ID
*      PRINT FMT("ACCT/PLCAT","15L"):FMT("CUSTOMER","10L"):FMT("CATEG","5L"):" CCY ":FMT("AMOUNT.FCY","15R"):FMT("AMOUNT.LCY","15R"):"  EXCH.RATE"

      CALL F.MATREAD(FN.LC.PARA, "SYSTEM", MAT R$PARAMETER,
         LC.PARA.AUDIT.DATE.TIME, F.LC.PARA, YERR)
      IF YERR THEN GOTO CONV.EXIT

      CALL F.MATREAD(FN.LC, DR.ID[1,12], MAT LC.REC,
         TF.LC.AUDIT.DATE.TIME, F.LC, YERR)
      IF YERR THEN GOTO CONV.EXIT

      CALL F.READ(FN.LCAC, DR.ID[1,12], R.LCAC, F.LCAC, YERR)

      CUST.NO = LC.REC(TF.LC.CON.CUS.LINK)
      CCY.MARKET = LC.REC(TF.LC.CURRENCY.MARKET)
      LC.TYPE = R.NEW(TF.DR.LC.CREDIT.TYPE)
      DRAW.CCY = R.NEW(TF.DR.DRAW.CURRENCY)

      DEBIT.ACCT = REIMB.ACCT
      DEBIT.CCY = DRAW.CCY
      VALUE.DATE = R.NEW(TF.DR.VALUE.DATE)

      GOSUB REVERSE.LIVEDB               ; * Credit LIVEDB
      IF ETEXT THEN GOTO CONV.EXIT

      GOSUB RAISE.LIVEDB                 ; * Debit LIVEDB
      IF ETEXT THEN GOTO CONV.EXIT

*      GOSUB REVERSE.PL                   ; * Debit P&L
*      IF ETEXT THEN GOTO CONV.EXIT
*
*      GOSUB REVERSE.TAX                  ; * Debit Tax
*      IF ETEXT THEN GOTO CONV.EXIT

      GOSUB RAISE.DIFF.ENTRY
      IF ETEXT THEN GOTO CONV.EXIT
*
*      NOFMS = DCOUNT(CONSOL.REC, @FM)
*      FOR ICNT = 1 TO NOFMS
*         FOR JCNT = 1 TO 80
*            IF CONSOL.REC<ICNT, JCNT> THEN
*               PRINT "CONSOL.REC<":ICNT:",":JCNT:">:":CONSOL.REC<ICNT,JCNT>
*            END
*         NEXT JCNT
*      NEXT ICNT
*
      CALL EB.ACCOUNTING("LC","VALAUT", CONSOL.REC, "" )
      CALL JOURNAL.UPDATE(ID.NEW)

CONV.EXIT:
      MATBUILD R.DR FROM R.NEW
      MAT R.NEW = MAT R.NEW.SAVE
      ID.NEW = ID.NEW.SAVE
      V = V.SAVE
*      RUNNING.UNDER.BATCH = FALSE
      RETURN

REBUILD.CONSOL.REC:
      THEIR.REFERENCE = LC.REC(TF.LC.EXTERNAL.REFERENCE)
      CUST.TYPE = LC.TYPE
      ACCOUNT.OFFICER = LC.REC(TF.LC.ACCOUNT.OFFICER)
      EXTERNAL.REF = LC.REC(TF.LC.EXTERNAL.REFERENCE)
      DEPT.CODE = R.NEW(TF.DR.CO.CODE)
      DEPT.CODE = R.USER<EB.USE.DEPARTMENT.CODE>
      LCNUMBER = ID.NEW
      POSITION.TYPE = LC.REC(TF.LC.POSITION.TYPE)
      LC.SYSTEM.ID = PRODUCT.ID
      CUST.NUMBER = CUST.NO
      PRODUCT.CATEGORY = LC.REC(TF.LC.CATEGORY.CODE)
      PL.CATEGORY = ''
      TRANSACTION.CODE = CRF.TXN.CODE
      IF DEBIT.CCY NE LCCY THEN
         LCYRATE = ''
         IF LCCY MATCH DRAW.CCY:VM:DEBIT.CCY THEN
            LCYRATE = R.NEW(TF.DR.RATE.BOOKED)
*         END ELSE
*            XCCY = DEBIT.CCY
*            GOSUB GET.HISTORIC.RATE
         END
         CALL EXCHRATE(CCY.MARKET, DEBIT.CCY, AMOUNT.FCY, LCCY,
            '', '', LCYRATE, '', AMOUNT.LCY, RTN.CODE)
         EXCHANGE.RATE = LCYRATE
      END ELSE
         AMOUNT.LCY = AMOUNT.FCY
         AMOUNT.FCY = ''
      END
      CURRENCY.CODE = DEBIT.CCY
      GOSUB BUILD.STMT.REC
      RETURN

BUILD.STMT.REC:
      ENTRY = ''
      IF PL.CATEGORY # "" THEN
         ENTRY<1,AC.STE.CUSTOMER.ID> = CUST.NUMBER
         ENTRY<1,AC.STE.PL.CATEGORY> = PL.CATEGORY
      END

      ENTRY<1,AC.STE.CRF.TYPE> = CRF.TYPE
      IF CRF.TYPE THEN
         ENTRY<1,AC.STE.CRF.TXN.CODE> = TRANSACTION.CODE
      END ELSE
         ENTRY<1,AC.STE.TRANSACTION.CODE> = TRANSACTION.CODE
      END
      ENTRY<1,AC.STE.ACCOUNT.NUMBER> = ACCOUNT.NO
      ENTRY<1,AC.STE.COMPANY.CODE> = ID.COMPANY
      ENTRY<1,AC.STE.AMOUNT.LCY> = AMOUNT.LCY
      ENTRY<1,AC.STE.THEIR.REFERENCE> = THEIR.REFERENCE
      ENTRY<1,AC.STE.NARRATIVE> = NARRATIVE
      ENTRY<1,AC.STE.ACCOUNT.OFFICER> = ACCOUNT.OFFICER
      ENTRY<1,AC.STE.PRODUCT.CATEGORY> = PRODUCT.CATEGORY
      ENTRY<1,AC.STE.VALUE.DATE> = VALUE.DATE
      ENTRY<1,AC.STE.CURRENCY> = CURRENCY.CODE
*
* Don't update the FCY.amount field with zero must be NULL
*
      IF CURRENCY.CODE <> LCCY THEN
         ENTRY<1,AC.STE.AMOUNT.FCY> = AMOUNT.FCY
         ENTRY<1,AC.STE.EXCHANGE.RATE> = EXCHANGE.RATE
      END

      IF AMOUNT.FCY # "" THEN
         ENTRY<1,AC.STE.POSITION.TYPE> = POSITION.TYPE
      END

      ENTRY<1,AC.STE.OUR.REFERENCE> = ID.NEW
      ENTRY<1,AC.STE.CURRENCY.MARKET> = CCY.MARKET
      ENTRY<1,AC.STE.DEPARTMENT.CODE> = DEPT.CODE
      ENTRY<1,AC.STE.TRANS.REFERENCE> = LCNUMBER
      ENTRY<1,AC.STE.SYSTEM.ID> = LC.SYSTEM.ID
      ENTRY<1,AC.STE.BOOKING.DATE> = TODAY
      ENTRY<1,AC.STE.SUPPRESS.POSITION> = ''
      ENTRY<1,AC.STE.CRF.MAT.DATE> = CRF.MAT.DATE
      DIFF.AMT.LCY += AMOUNT.LCY
*      GOSUB PRINT.DEBUG
      RETURN

REVERSE.LIVEDB:
      CRF.TXN.CODE = 'REV'
      AMOUNT.FCY = R.NEW(TF.DR.REIMBURSE.AMOUNT)
      AMOUNT.LCY = ''
      CRF.TYPE = "LIVEDB"
*GB0002227s
**The reversal should be based on the M aturity Review
*      CRF.MAT.DATE = LC.REC(TF.LC.EXPIRY.DATE)
      CRF.MAT.DATE = R.DR<TF.DR.MATURITY.REVIEW>
      GOSUB REBUILD.CONSOL.REC
      CONSOL.REC = ENTRY
      RETURN

REVERSE.PL:
      ENTRY.REC = ''
      CRF.TYPE = ''
      CRF.MAT.DATE = ''
      LC.TYPE = LC.REC(TF.LC.LC.TYPE)
      CCY.MARKET = LC.REC(TF.LC.CURRENCY.MARKET)
      VALUE.DATE = R.NEW(TF.DR.VALUE.DATE)
      DRAW.CCY = R.NEW(TF.DR.DRAW.CURRENCY)
      DRAW.DIG = ID.NEW[13,2]
      NO.CHGS = DCOUNT(R.LCAC<LCAC.CHRG.CODE>,VM)
      FOR ICNT = 1 TO NO.CHGS
         IF DRAW.DIG = R.LCAC<LCAC.CHRG.REL.DRAW, ICNT>[4,2] AND R.LCAC<LCAC.PARTY.CHRG, ICNT> MATCH 'O':VM:'CO' THEN
            AMOUNT.FCY = R.LCAC<LCAC.CHRG.AMT.DUE, ICNT>
            AMOUNT.LCY = -R.LCAC<LCAC.CHRG.LCCY.AMT, ICNT>
            CURRENCY.CODE = R.LCAC<LCAC.CHRG.CCY, ICNT>
            CHG.CODE = R.LCAC<LCAC.CHRG.CODE, ICNT>
            R.FT.CHG = ''
            READ R.FT.CHG FROM F.FTCOM, CHG.CODE THEN
               FT.CATEG = FT4.CATEGORY.ACCOUNT
               FT.TXN.CODE = FT4.TXN.CODE.DR
            END ELSE
               READ R.FT.CHG FROM F.FTCHG, CHG.CODE THEN
                  FT.CATEG = FT5.CATEGORY.ACCOUNT
                  FT.TXN.CODE = FT5.TXN.CODE.DR
               END ELSE
                  ETEXT ="LC.RTN.CANT.FIND":FM:CHG.CODE
                  ENTRY.REC = ''
                  EXIT
               END
            END
            PL.CATEGORY = R.FT.CHG<FT.CATEG>
            TRANSACTION.CODE = R.FT.CHG<FT.TXN.CODE>
            CUST.NUMBER = LC.REC(TF.LC.CON.CUS.LINK)
            GOSUB BUILD.STMT.REC
            ENTRY.REC<-1> = ENTRY
         END
      NEXT ICNT
      IF ENTRY.REC THEN
         CONSOL.REC = ENTRY.REC :FM: CONSOL.REC
      END
      RETURN

REVERSE.TAX:
      ENTRY.REC = ''
      CRF.TYPE = ''
      CRF.MAT.DATE = ''
      CUST.NUMBER = ''
      PL.CATEGORY = ''
      LC.TYPE = LC.REC(TF.LC.LC.TYPE)
      CCY.MARKET = LC.REC(TF.LC.CURRENCY.MARKET)
      VALUE.DATE = R.NEW(TF.DR.VALUE.DATE)
      DRAW.CCY = R.NEW(TF.DR.DRAW.CURRENCY)
      DRAW.DIG = ID.NEW[13,2]
      NO.TAXS = DCOUNT(R.LCAC<LCAC.TAX.CODE>,VM)
      FOR ICNT = 1 TO NO.TAXS
         IF DRAW.DIG = R.LCAC<LCAC.TAX.REL.DRAW, ICNT>[4,2] AND R.LCAC<LCAC.TAX.PARTY.CHRG, ICNT> = 'O' THEN
            AMOUNT.FCY = R.LCAC<LCAC.TAX.AMT, ICNT>
            AMOUNT.LCY = -R.LCAC<LCAC.TAX.LCCY.AMT, ICNT>
            CURRENCY.CODE = R.LCAC<LCAC.TAX.CODE.CCY, ICNT>
            TAX.CODE = R.LCAC<LCAC.TAX.CODE, ICNT>
            TAX.DATE = R.LCAC<LCAC.TAX.DATE, ICNT>
            R.TAX = ''
            GOSUB GET.TAX.RECORD
            IF ETEXT THEN
               ENTRY.REC = ''
               EXIT
            END
            PRODUCT.CATEGORY = R.TAX<EB.TAX.CATEGORY>
            TRANSACTION.CODE = R.TAX<EB.TAX.TR.CODE.DR>
            ACCOUNT.NO = CURRENCY.CODE:PRODUCT.CATEGORY:"0001"
            GOSUB BUILD.STMT.REC
            ENTRY.REC<-1> = ENTRY
         END
      NEXT ICNT
      IF ENTRY.REC THEN
         CONSOL.REC = ENTRY.REC :FM: CONSOL.REC
      END
      RETURN

RAISE.LIVEDB:
      CRF.TXN.CODE = 'NEW'
*      AMOUNT.FCY = -R.NEW(TF.DR.DOCUMENT.AMOUNT)
*      IF R.NEW(TF.DR.DIS.PARTY.CHRD) EQ 'O' THEN
*         AMOUNT.FCY -= R.NEW(TF.DR.DISCOUNT.AMT)
*         AMOUNT.FCY -= R.NEW(TF.DR.LOAD.AMOUNT)
*      END
      LCYRATE = ''
      AMOUNT.FCY = ''
      REIMB.AMT = R.NEW(TF.DR.REIMBURSE.AMOUNT)
      CALL EXCHRATE(CCY.MARKET, DRAW.CCY, AMOUNT.FCY, REIMB.CCY,
         REIMB.AMT, '', LCYRATE, '', '', RTN.CODE)
      R.NEW(TF.DR.REIMB.DOC.CCY.AMT) = AMOUNT.FCY
      AMOUNT.FCY = - AMOUNT.FCY
      DEBIT.CCY = DRAW.CCY
      AMOUNT.LCY = ''
      CRF.TYPE = "LIVEDB"
      CRF.MAT.DATE = R.NEW(TF.DR.MATURITY.REVIEW)
      GOSUB REBUILD.CONSOL.REC
      CONSOL.REC<-1> = ENTRY
      RETURN

RAISE.DIFF.ENTRY:
      IF DIFF.AMT.LCY = 0 THEN RETURN
      AMOUNT.LCY = -DIFF.AMT.LCY
      AMOUNT.FCY = ''
      EXCHANGE.RATE = ''
      CRF.TYPE = ''
      CRF.MAT.DATE = ''
      CUST.NUMBER = ''
      PL.CATEGORY = ''
      CURRENCY.CODE = LCCY
      IF AMOUNT.LCY > 0 THEN
         TRANSACTION.CODE = R$PARAMETER(LC.PARA.PAY.TRANS.CR)
      END ELSE
         TRANSACTION.CODE = R$PARAMETER(LC.PARA.PAY.TRANS.DR)
      END
      CALL DBR('ACCOUNT.CLASS':FM:AC.CLS.CATEGORY, 'LCDIFF',
         DIFF.CATEGORY)
      PRODUCT.CATEGORY = LC.REC(TF.LC.CATEGORY.CODE)
      IF DIFF.CATEGORY THEN
         ACCOUNT.NO = LCCY:DIFF.CATEGORY:'0001'
         CUST.NO = ''
      END ELSE
         PL.CATEGORY = '53006'           ; * reval
         ACCOUNT.NO = ''
         CUST.NO = LC.REC(TF.LC.CON.CUS.LINK)
      END
      GOSUB BUILD.STMT.REC
      CONSOL.REC = ENTRY :FM: CONSOL.REC
      RETURN

GET.TAX.RECORD:
      SEL.CMD = "SELECT ":FN.TAX:" WITH @ID LIKE ...":TAX.CODE:"... BY.DSND @ID"
      TAX.LIST = ''
      CALL EB.READLIST(SEL.CMD, TAX.LIST, '', NO.ITEM, RTN.CODE)
      LOOP
         TAX.KEY = ''
         REMOVE TAX.KEY FROM TAX.LIST SETTING FTAX
      WHILE TAX.KEY:FTAX DO
         YDATE = TAX.KEY['.',2,1]
         IF TAX.DATE >= YDATE THEN
            READ R.TAX FROM F.TAX, TAX.KEY ELSE
               ETEXT ="LC.RTN.FATAL.ERROR.CANT.FIND.TAX":FM:TAX.KEY
            END
         END
      REPEAT
      RETURN

GET.HISTORIC.RATE:
      LCYRATE = ''
      IF R.DR<TF.DR.DATE.TIME>[1,2] = '00' THEN
         DOC.TXN.DATE = "20":R.DR<TF.DR.DATE.TIME>[1,6]
      END ELSE
         DOC.TXN.DATE = "19":R.DR<TF.DR.DATE.TIME>[1,6]
      END
      CCY.REC = ''
      CALL GET.CCY.HISTORY(DOC.TXN.DATE, XCCY, CCY.REC, CCY.RET)
      IF CCY.REC<EB.CUR.FIXED.RATE> > 0 THEN
         FIX.RATE = CCY.REC<EB.CUR.FIXED.RATE>
         CCY.REC = ''
         XCCY = 'EUR'
         CALL GET.CCY.HISTORY(DOC.TXN.DATE, XCCY, CCY.REC, CCY.RET)
         LOCATE CCY.MARKET IN CCY.REC<EB.CUR.CURRENCY.MARKET,1> SETTING CPOS THEN
            MID.RATE = CCY.REC<EB.CUR.MID.REVAL.RATE, CPOS>
            MID.RATE = IF MID.RATE # '' THEN MID.RATE ELSE 1
            IF CCY.REC<EB.CUR.QUOTATION.CODE> # '' THEN
               LCYRATE = FIX.RATE / MID.RATE
            END ELSE
               LCYRATE = FIX.RATE * MID.RATE
            END
         END
      END ELSE
         LOCATE CCY.MARKET IN CCY.REC<EB.CUR.CURRENCY.MARKET,1> SETTING CPOS THEN
            LCYRATE = CCY.REC<EB.CUR.MID.REVAL.RATE, CPOS>
         END
      END
      RETURN

PRINT.DEBUG:
      AC.PRN = IF PL.CATEGORY THEN PL.CATEGORY ELSE ACCOUNT.NO
      PRINT FMT(AC.PRN, '15L'):FMT(CUST.NUMBER, "10L"):FMT(PRODUCT.CATEGORY, "5L"):' ':CURRENCY.CODE:' ':FMT(AMOUNT.FCY, "15R"):FMT(AMOUNT.LCY, "15R"):FMT(EXCHANGE.RATE,"8R4")
      RETURN

INITIALIZE:
      DIM R.NEW.SAVE(TF.LC.AUDIT.DATE.TIME)
      CONSOL.REC = '' ; ENTRY.REC = ''
      IMPORT.LC = 0 ; EXPORT.LC = 1
      DIFF.AMT.LCY = 0
      CREDIT.TYPE = 'E'
      CRF.TYPE.SAVE = ''
      MAT LC.REC = ''
      R.LCAC = ''
      ACCOUNT.NO = ''
      ETEXT = ''
      PRODUCT.ID = 'LCD'
*      RUNNING.UNDER.BATCH = TRUE

      *// Initialize and LC and DR info.
      MAT R.NEW.SAVE = MAT R.NEW
      ID.NEW.SAVE = ID.NEW
      V.SAVE = V
      V = TF.DR.AUDIT.DATE.TIME
      ID.NEW = DR.ID
      MATPARSE R.NEW FROM R.DR

      F.LC = ''
      FN.LC = 'F.LETTER.OF.CREDIT'
      CALL OPF(FN.LC, F.LC)

      F.LET = ''
      FN.LET = 'F.LC.ENT.TODAY'
      CALL OPF(FN.LET, F.LET)

      F.LC.PARA = ''
      FN.LC.PARA = 'F.LC.PARAMETERS'
      CALL OPF(FN.LC.PARA, F.LC.PARA)

      F.LCAC = ''
      FN.LCAC = 'F.LC.ACCOUNT.BALANCES'
      CALL OPF(FN.LCAC, F.LCAC)

      FN.FTCOM = 'F.FT.COMMISSION.TYPE'
      F.FTCOM = ''
      CALL OPF(FN.FTCOM, F.FTCOM)

      FN.FTCHG = 'F.FT.CHARGE.TYPE'
      F.FTCHG = ''
      CALL OPF(FN.FTCHG, F.FTCHG)

      F.TAX = ''
      FN.TAX = 'F.TAX'
      CALL OPF(FN.TAX, F.TAX)
      RETURN

   END
